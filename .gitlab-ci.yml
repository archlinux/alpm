variables:
  RUST_BACKTRACE: full

stages:
  - check
  - test
  - publish
  - report
  - pages

# default setup running on default branch and in MRs
.default:
  before_script:
    - pacman-key --init
    - pacman -Sy --needed --noconfirm archlinux-keyring just
  interruptible: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# default setup with Rust tools running on default branch and in MRs
.default-with-rust:
  extends: .default
  before_script:
    - pacman-key --init
    - pacman -Sy --needed --noconfirm archlinux-keyring just
    - just install-alpm-package-set rust-dev
    - just install-rust-dev-tools

# default setup with Python tools running on default branch and in MRs
.default-with-python:
  extends: .default-with-rust
  before_script:
    - pacman-key --init
    - pacman -Sy --needed --noconfirm archlinux-keyring just
    - just install-alpm-package-set python-dev
    - just install-rust-dev-tools

commits:
  extends: .default
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  script:
    - just install-alpm-package-set commits
    # fetch the default branch as we need it for comparison
    - git fetch origin $CI_DEFAULT_BRANCH
    # setup a dummy user as `cog verify` needs that
    - git config --local user.name "Foobar McFooface"
    - git config --local user.email "foobar@mcfooface.com"
    - just check-commits
  stage: check

spelling:
  extends: .default
  script:
    - just install-alpm-package-set spelling
    - just check-spelling
  stage: check

formatting:
  extends: .default-with-python
  script:
    - just install-alpm-package-set formatting
    - just check-formatting
  stage: check

shell-code:
  extends: .default
  script:
    - just install-alpm-package-set shell
    - just check-shell-code
  stage: check

rust-code:
  extends: .default-with-rust
  script:
    - just install-alpm-package-set rust
    - just check-rust-code
  stage: check

python-code:
  extends: .default-with-python
  script:
    - just install-alpm-package-set rust
    - just check-python-code
  stage: check

unused-deps:
  extends: .default-with-rust
  script:
    - just install-alpm-package-set unused
    - just check-unused-deps
  stage: check

dependencies:
  extends: .default-with-rust
  script:
    - just install-alpm-package-set dependencies
    - just check-dependencies
  stage: check

licenses:
  extends: .default-with-rust
  script:
    - just install-alpm-package-set licenses
    - just check-licenses
  stage: check

links:
  extends: .default-with-rust
  script:
    - just install-alpm-package-set links
    - just check-links
  stage: check

test:
  extends: .default-with-rust
  script:
    - just install-alpm-package-set coverage
    - just test
  stage: test

test-python:
  extends: .default-with-python
  script:
    - just install-alpm-package-set test
    - just test-python
  stage: test

docs:
  extends: .default-with-rust
  script:
    - just install-alpm-package-set docs
    - just docs
  stage: test

test-docs:
  extends: .default-with-rust
  script:
    - just install-alpm-package-set coverage
    - just test-docs
  stage: test

test-readmes:
  extends: .default-with-rust
  script:
    - just install-alpm-package-set readmes
    - just test-readmes
  stage: test

test-coverage:
  extends: .default-with-rust
  script:
    - just install-alpm-package-set coverage
    - just test-coverage
  stage: test
  # This is a regex that looks at the output from the `just test-coverage` command
  # and extracts the coverage percent from it.
  coverage: '/Test-coverage: ([0-9.]*)%/'
  artifacts:
    paths:
      - target/llvm-cov/html
    reports:
      coverage_report:
        coverage_format: cobertura
        path: target/llvm-cov/cobertura-coverage.xml
      # Expose the code coverage as a GitLab metric.
      # This allows us to easily spot changes in the overall coverage.
      metrics: target/coverage-metrics.txt

build-book:
  extends: .default-with-rust
  script:
    - just install-alpm-package-set book
    - just build-book
  stage: test

manpages-specs-completions:
  extends: .default-with-rust
  script:
    - just install-alpm-package-set manpages
    - just generate-manpages-and-specs
    - just generate-completions
  stage: test

integration-test:
  extends: .default-with-rust
  script:
    - just install-alpm-package-set coverage
    - just ignored=true test
  stage: test

crates_publish:
  extends: .default-with-rust
  dependencies: []
  rules:
    - if: '$CARGO_REGISTRY_TOKEN && $CI_COMMIT_TAG && $CI_PROJECT_PATH == "archlinux/alpm/alpm"'
  script:
    - just install-alpm-package-set publish
    - just ci-publish
  stage: publish
  tags:
    - secure

issue-bot:
  image: registry.gitlab.com/gitlab-org/distribution/issue-bot:latest
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      when: on_failure
  script: /issue-bot
  stage: report

pages:
  artifacts:
    paths:
      - output/docs
  extends: .default-with-rust
  publish: output/docs
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - just install-alpm-package-set book
    - just build-book
  stage: pages
